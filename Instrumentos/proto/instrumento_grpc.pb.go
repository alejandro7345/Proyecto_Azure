// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/instrumento.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InstrumentService_GetInstrumentinfo_FullMethodName     = "/instrumento.InstrumentService/GetInstrumentinfo"
	InstrumentService_GetInstrumentList_FullMethodName     = "/instrumento.InstrumentService/GetInstrumentList"
	InstrumentService_AddInstrumentos_FullMethodName       = "/instrumento.InstrumentService/AddInstrumentos"
	InstrumentService_GetInstrumentosByType_FullMethodName = "/instrumento.InstrumentService/GetInstrumentosByType"
)

// InstrumentServiceClient is the client API for InstrumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstrumentServiceClient interface {
	GetInstrumentinfo(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error)
	GetInstrumentList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstrumentResponse], error)
	AddInstrumentos(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewInstrumentRequest, AddInstrumentResponse], error)
	GetInstrumentosByType(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InstrumentTypeRequest, InstrumentResponse], error)
}

type instrumentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentServiceClient(cc grpc.ClientConnInterface) InstrumentServiceClient {
	return &instrumentServiceClient{cc}
}

func (c *instrumentServiceClient) GetInstrumentinfo(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstrumentResponse)
	err := c.cc.Invoke(ctx, InstrumentService_GetInstrumentinfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentServiceClient) GetInstrumentList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstrumentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InstrumentService_ServiceDesc.Streams[0], InstrumentService_GetInstrumentList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, InstrumentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InstrumentService_GetInstrumentListClient = grpc.ServerStreamingClient[InstrumentResponse]

func (c *instrumentServiceClient) AddInstrumentos(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewInstrumentRequest, AddInstrumentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InstrumentService_ServiceDesc.Streams[1], InstrumentService_AddInstrumentos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewInstrumentRequest, AddInstrumentResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InstrumentService_AddInstrumentosClient = grpc.ClientStreamingClient[NewInstrumentRequest, AddInstrumentResponse]

func (c *instrumentServiceClient) GetInstrumentosByType(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InstrumentTypeRequest, InstrumentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InstrumentService_ServiceDesc.Streams[2], InstrumentService_GetInstrumentosByType_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InstrumentTypeRequest, InstrumentResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InstrumentService_GetInstrumentosByTypeClient = grpc.BidiStreamingClient[InstrumentTypeRequest, InstrumentResponse]

// InstrumentServiceServer is the server API for InstrumentService service.
// All implementations must embed UnimplementedInstrumentServiceServer
// for forward compatibility.
type InstrumentServiceServer interface {
	GetInstrumentinfo(context.Context, *InstrumentRequest) (*InstrumentResponse, error)
	GetInstrumentList(*Empty, grpc.ServerStreamingServer[InstrumentResponse]) error
	AddInstrumentos(grpc.ClientStreamingServer[NewInstrumentRequest, AddInstrumentResponse]) error
	GetInstrumentosByType(grpc.BidiStreamingServer[InstrumentTypeRequest, InstrumentResponse]) error
	mustEmbedUnimplementedInstrumentServiceServer()
}

// UnimplementedInstrumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInstrumentServiceServer struct{}

func (UnimplementedInstrumentServiceServer) GetInstrumentinfo(context.Context, *InstrumentRequest) (*InstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrumentinfo not implemented")
}
func (UnimplementedInstrumentServiceServer) GetInstrumentList(*Empty, grpc.ServerStreamingServer[InstrumentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetInstrumentList not implemented")
}
func (UnimplementedInstrumentServiceServer) AddInstrumentos(grpc.ClientStreamingServer[NewInstrumentRequest, AddInstrumentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddInstrumentos not implemented")
}
func (UnimplementedInstrumentServiceServer) GetInstrumentosByType(grpc.BidiStreamingServer[InstrumentTypeRequest, InstrumentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetInstrumentosByType not implemented")
}
func (UnimplementedInstrumentServiceServer) mustEmbedUnimplementedInstrumentServiceServer() {}
func (UnimplementedInstrumentServiceServer) testEmbeddedByValue()                           {}

// UnsafeInstrumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstrumentServiceServer will
// result in compilation errors.
type UnsafeInstrumentServiceServer interface {
	mustEmbedUnimplementedInstrumentServiceServer()
}

func RegisterInstrumentServiceServer(s grpc.ServiceRegistrar, srv InstrumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedInstrumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InstrumentService_ServiceDesc, srv)
}

func _InstrumentService_GetInstrumentinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServiceServer).GetInstrumentinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstrumentService_GetInstrumentinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServiceServer).GetInstrumentinfo(ctx, req.(*InstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstrumentService_GetInstrumentList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstrumentServiceServer).GetInstrumentList(m, &grpc.GenericServerStream[Empty, InstrumentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InstrumentService_GetInstrumentListServer = grpc.ServerStreamingServer[InstrumentResponse]

func _InstrumentService_AddInstrumentos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InstrumentServiceServer).AddInstrumentos(&grpc.GenericServerStream[NewInstrumentRequest, AddInstrumentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InstrumentService_AddInstrumentosServer = grpc.ClientStreamingServer[NewInstrumentRequest, AddInstrumentResponse]

func _InstrumentService_GetInstrumentosByType_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InstrumentServiceServer).GetInstrumentosByType(&grpc.GenericServerStream[InstrumentTypeRequest, InstrumentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InstrumentService_GetInstrumentosByTypeServer = grpc.BidiStreamingServer[InstrumentTypeRequest, InstrumentResponse]

// InstrumentService_ServiceDesc is the grpc.ServiceDesc for InstrumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstrumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instrumento.InstrumentService",
	HandlerType: (*InstrumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstrumentinfo",
			Handler:    _InstrumentService_GetInstrumentinfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInstrumentList",
			Handler:       _InstrumentService_GetInstrumentList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddInstrumentos",
			Handler:       _InstrumentService_AddInstrumentos_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetInstrumentosByType",
			Handler:       _InstrumentService_GetInstrumentosByType_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/instrumento.proto",
}
